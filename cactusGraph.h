#ifndef CACTUS_GRAPH_H_
#define CACTUS_GRAPH_H_
#include "fastCMaths.h"
#include "commonC.h"
#include "hashTableC.h"
#include "pinchGraph.h"
//#include "net.h"

#include "avl.h"
#include "net.h"
#include "commonC.h"

/*
 * Data structures and methods used in building the cactus graph from
 * the pinch graph.
 */

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//Cactus graph data structures for representing the
//basic cactus graph.
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

struct CactusVertex {
	int32_t vertexID;
	struct List *edges;
};

struct CactusVertex *constructCactusVertex();

void destructCactusVertex(struct CactusVertex *vertex);

struct CactusEdge {
	struct CactusVertex *from;
	struct CactusVertex *to;
	struct List *segments;
	struct CactusEdge *rEdge;
};

struct CactusEdge *constructCactusEdge(struct List *segments);

void destructCactusEdge(struct CactusEdge *edge);

struct CactusGraph {
	struct List *vertices;
};

struct CactusGraph *constructCactusGraph(struct PinchGraph *pinchGraph,
										 struct List *extraEdges,
										 struct List *threeEdgeConnectedComponents);

void destructCactusGraph(struct CactusGraph *cactusGraph);

void checkCactusGraph(struct PinchGraph *pinchGraph,
					  struct List *threeEdgeConnectedComponents,
					  struct CactusGraph *cactusGraph);

void checkCactusContainsOnly2EdgeConnectedComponents(struct CactusGraph *cactusGraph);

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//Method to calculate 2-edge connected components
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

struct List *computeBiConnectedComponents(struct CactusGraph *cactusGraph);

/*
 * Method sorts the bi-connected components into order.
 */
struct List *computeSortedBiConnectedComponents(struct CactusGraph *cactusGraph);

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//Method to compute DFS discovery time for vertices.
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

int32_t *getDFSDiscoveryTimes(struct CactusGraph *cactusGraph);

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//Methods for dealing with  reverse complement matches
//that create self loops and stubs that create free ends.
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

struct List *getEmptyExtraEdges(struct PinchGraph *pinchGraph);

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//I/O Methods to interact with the 3-edge connected component
//code.
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

void writeOut3EdgeGraph(struct PinchGraph *pinchGraph, struct List *greyEdgeComponents, struct List *extraEdges, FILE *fileHandle);

struct List *readThreeEdgeComponents(struct PinchGraph *, struct List *greyEdgeComponents, char *file);

void writeOutCactusGraph(struct CactusGraph *cactusGraph, struct PinchGraph *pinchGraph, struct hashtable *names, FILE *fileHandle);

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//Script to construct the cactus graph
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

int32_t computeCactusGraph(struct PinchGraph *pinchGraph, struct CactusGraph **cactusGraph, struct List **threeEdgeConnectedComponents, struct List *extraEdges, char *logLevelString);


////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//Methods to manipulate the cactus graph
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

void circulariseStems(struct CactusGraph *cactusGraph, struct List *extraEdges, struct List *threeEdgeConnectedComponents);

void breakLoopDiscontinuities(struct CactusGraph *cactusGraph, struct List *extraEdges,
							  struct List *threeEdgeConnectedComponents);

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//Choosing which atoms in the chains to keep.
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

void filterAtomsByTreeCoverageAndLength(struct List *biConnectedComponents,
		struct List *chosenAtoms,
		Net *net,
		float proportionToKeep, /*Proportion of all atoms to select to keep*/
		float discardRatio, /*The proportion of an atom's chain's average atom score required to be score to be considered */
		float minimumTreeCoverage, /*Minimum tree coverage to be included */
		int32_t minimumChainLength, /* Minimum chain length to be included */
		struct PinchGraph *pinchGraph,
		struct List *contigIndexToContigStrings);

void logTheChosenAtomSubset(struct List *biConnectedComponents, struct List *chosenAtoms, struct PinchGraph *pinchGraph,
		Net *net, struct List *contigIndexToContigStrings);

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//Cactus graph misc functions.
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

struct PinchEdge *cactusEdgeToFirstPinchEdge(struct CactusEdge *edge, struct PinchGraph *pinchGraph);

int32_t isAStubOrCapCactusEdge(struct CactusEdge *edge, struct PinchGraph *pinchGraph);

#endif
